generator client {
  provider = "prisma-client-js"
  seed     = "ts-node prisma/seed.ts"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  CREATOR
  ADMIN
  ELEVATED_USER
}

enum SourceType {
  URL
  UPLOAD
}

enum CloudProvider {
  AWS
  GCP
  AZURE
}

enum DeploymentStatus {
  PENDING
  NOTDEPLOYED
  INITIATED
  DEPLOYING
  RUNNING
  FAILED
  STOPPED
}

enum RazorpayFundAccountType { 
  vpa
  bank_account
}

enum CreatorPayoutsStatues { 
  initiated
  processed
}

model User {
  id        String   @id @default(cuid())
  firstName String
  lastName  String
  clerkId   String   @unique
  email     String   @unique
  role      UserRole @default(USER)
  creator   Creator?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  UserSubscription UserSubscription[]
}

model UserSubscription { 
  id        String    @id @default(cuid())
  userId    String    
  user      User      @relation(fields: [userId], references: [id])
  modelId   String    
  model     Model     @relation(fields: [modelId], references: [id])
  amount    Decimal   
  startDate DateTime
  endDate   DateTime?
  lastPaymentDate  DateTime
  nextPaymentDate  DateTime?
  status    String
  isSoftSuccess   Boolean?  //updated to facilitate delayed webhooks
  razorpayPlanId  String  
  razorpaySubscriptionId  String  @unique
  apiKey    String?  @unique
  UserSubscriptionPayments UserSubscriptionPayment[]
  @@unique([userId, modelId])
}

model UserSubscriptionPayment { 
  id         String   @id @default(cuid())
  razorpayPaymentsId String @unique
  subscriptionId    String  
  UserSubscription  UserSubscription @relation(fields: [subscriptionId], references: [id])
  paymentDate   DateTime
  status      String
  remainingCount   Int
}


model Creator {
  id                 String   @id @default(cuid())
  userId             String   @unique
  user               User     @relation(fields: [userId], references: [id])
  experienceLevel    String
  specialization     String[]
  aiFrameworks       String[]
  modelTypes         String[]
  developmentGoals   String
  projectDescription String
  portfolioUrl       String?
  githubUrl          String?
  models             Model[]  @relation("CreatorToModels")
  razorpayCreatorId String
  razorpayFaId      String?  //razorpay fund acc. id.
  razorpayFaType    RazorpayFundAccountType?
  outstandingAmount Decimal? 
  totalPaidAmount   Decimal?
  totalEarnedAmount Decimal?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  CreatorPayouts    CreatorPayout[]
}

model CreatorPayout { 
  id                String  @id @default(cuid())
  creatorId         String  
  Creator           Creator @relation(fields: [creatorId], references: [id])  
  payoutDate        DateTime
  paidAmount        Decimal
  razorpayPayoutId  String  @unique
  referenceNumber   String  @unique
  idempotencyKey    String  @unique
  status            String        
}

model Model {
  id          String       @id @default(cuid())
  name        String       @unique
  description String
  modelType   String
  license     String
  sourceType  SourceType
  url         String? // Optional URL for Hugging Face models
  tags        String[] // Tags as array of strings
  revision    String? // Optional model revision (e.g., 'main')
  parameters  Float // Number of parameters in billions
  subscriptionPrice Float // Monthly subscription price in USD
  script      ModelScript? @relation(fields: [scriptId], references: [id])
  scriptId    String?
  creatorId   String
  creator     Creator      @relation("CreatorToModels", fields: [creatorId], references: [id])
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  price       Decimal
  razorpayPlanId  String 

  UserSubscription  UserSubscription[]  
  Deployment  Deployment[]
  apiCalls    ModelApiCall[]
}

model ModelScript {
  id          String   @id @default(cuid())
  content     String   // Base64 encoded script content
  modelType   String   // Type of model this script is for
  models      Model[]  // Changed to one-to-many relation
}

model ModelApiCall {
  id            String   @id @default(cuid())
  modelId       String
  model         Model    @relation(fields: [modelId], references: [id])
  latency       Int      // Response time in milliseconds
  statusCode    Int      // HTTP status code
  errorMessage  String?  // Error message if any
  timestamp     DateTime @default(now())
}

model Deployment {
  id            String   @id @default(cuid())
  modelId       String
  model         Model    @relation(fields: [modelId], references: [id])
  status        String
  deploymentUrl String?
  apiKey        String?
  gpuType       String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}
