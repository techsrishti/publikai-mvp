generator client {
  provider = "prisma-client-js"
 }

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
enum UserRole {
  USER
  CREATOR
  ADMIN
  ELEVATED_USER
}

enum SourceType {
  URL
  UPLOAD
}

enum RazorpayFundAccountType { 
  vpa
  bank_account
}

enum CreatorPayoutsStatues { 
  initiated
  processed
}

model User {
  id        String   @id @default(cuid())
  firstName String
  lastName  String
  clerkId   String   @unique
  email     String   @unique
  role      UserRole @default(USER)
  creator   Creator?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Creator {
  id                String   @id @default(cuid())
  userId            String   @unique
  user              User     @relation(fields: [userId], references: [id])
  experienceLevel   String
  specialization    String[]
  aiFrameworks      String[]
  modelTypes        String[]
  developmentGoals  String
  projectDescription String
  portfolioUrl      String?
  githubUrl         String?
  razorpayCreatorId String
  razorpayFaId      String?  //razorpay fund acc. id.
  razorpayFaType    RazorpayFundAccountType?
  outstandingAmount Decimal? 
  totalPaidAmount   Decimal?
  totalEarnedAmount Decimal?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  CreatorPayouts    CreatorPayout[]
}

model CreatorPayout { 
  id                String  @id @default(cuid())
  creatorId         String  @unique
  Creator           Creator @relation(fields: [creatorId], references: [id])  
  payoutDate        DateTime
  paidAmount        Decimal
  razorpayTxnId     String  @unique
  status            String        
}

model Model {
  id          String     @id @default(cuid())
  name        String     @unique
  description String
  modelType   String
  license     String
  sourceType  SourceType
  url         String?    // Optional URL for Hugging Face models
  tags        String[]   // Tags as array of strings
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}